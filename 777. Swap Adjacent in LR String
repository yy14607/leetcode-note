In a string composed of 'L', 'R', and 'X' characters, like "RXXLRXRXL", a move consists of either replacing one occurrence of "XL" with "LX", or replacing one occurrence of "RX" with "XR". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.

Example:

Input: start = "RXXLRXRXL", end = "XRLXXRRLX"
Output: True
Explanation:
We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX
 

Constraints:

1 <= len(start) == len(end) <= 10000.
Both start and end will only consist of characters in {'L', 'R', 'X'}.



Solution 1:

class Solution:
    def canTransform(self, start: str, end: str) -> bool:
        if start.replace("X", "") != end.replace("X", ""):
            return 0
        countR_start = countL_start = 0
        countR_end = countL_end = 0
        for i in range(len(start)):
            countR_start += (start[i]=="R")
            countR_end += (end[i]=="R")
            countL_start += (start[i]=="L")
            countL_end += (end[i]=="L")
            if countR_start < countR_end or countL_start>countL_end:
                return 0
        if countR_start!= countR_end or countL_start!= countL_end:
            return 0
        else:
            return 1

Solution 2:

class Solution:
    def canTransform(self, start: str, end: str) -> bool:
            L, R = 0, 0
            for s, e in zip(start, end):
                L += (e == 'L') - (s == 'L')
                R += (s == 'R') - (e == 'R')

                if L < 0 or L > 0 and s == 'R' or R < 0 or R > 0 and s == 'L':
                    return False

            return not R and not L
